@.{
	Object.defineProperties([].__proto__, {
		strs: {
			get() {
				return this.map(s => `'${s}'`);
			},
		},
		or: {
			get() {
				return this.join(' | ');
			},
		},
	});

	Object.defineProperties(''.__proto__, {
		$: {
			get() {
				return `\$\{${this}}`;
			},
		},
		opt: {
			get() {
				return `''|\`${this}\``.$;
			},
		},
		star: {
			get() {
				return `RepeatStar<\`${this}\`>`.$;
			},
		},
		times: {
			value(n_lower, n_upper=-1) {
				const s_embed = this;
				let s_out = s_embed.repeat(n_lower);
				let s_upper = '';
				for(let i_recurse=n_lower; i_recurse<n_upper; i_recurse++) {
					s_upper = (s_embed+s_upper).opt;
				}
				return s_out+s_upper;
			},
		},
	});

	function range(s_lo, s_hi) {
		const a_chars = [];
		for(let i_code=s_lo.charCodeAt(0); i_code<=s_hi.charCodeAt(0); i_code++) {
			a_chars.push(`'${String.fromCharCode(i_code)}'`);
		}
		return a_chars.join(' | ');
	}
}


type ALPHA_LOWER = @{range('a', 'z')}
type ALPHA_UPPER = UpperCase<ALPHA_LOWER>;
type ALPHA = ALPHA_LOWER | ALPHA_UPPER;

type ALPHANUM = ALPHA | DIGIT;

type RepeatStar<TypeString extends string> = '' | `${TypeString}${Repeat<TypeString>}`;
type RepeatPlus<TypeString extends string> = `${TypeString}${RepeatStar<TypeString>}`;


type Regular = 'art-lojban' | 'cel-gaulish' | 'no-bok' | 'no-nyn' | 'zh-guoyu'
	| 'zh-hakka' | 'zh-min' | 'zh-min-nan' | 'zh-xiang';

type Irregular = 'en-GB-oed' | 'i-ami' | 'i-bnn' | 'i-default' | 'i-enochian' | 'i-hak'
	| 'i-klingon' | 'i-lux' | 'i-mingo' | 'i-navajo' | 'i-pwn' | 'i-tao' | 'i-tay' | 'i-tsu'
	| 'sgn-BE-FR' | 'sgn-BE-NL' | 'sgn-CH-DE';




@*{
	function *compile(h_productions) {
		for(const si_production of Object.keys(h_productions).reverse()) {
			const a_unions = h_productions[si_production].map((a_rules) => {
				return a_rules.join('');
			})

			yield `\ntype ${si_production} = \`${a_unions.join('\n\t| ')}\`;\n`;
		}
	}


	yield* compile({
		LangTag: [
			[
				'Language'.$,
				'-${Script}'.opt,
				'-${Region}'.opt,
				'-${Variant}'.star,
				'-${Extension}'.star,
				'-${PrivateUse}'.opt,
			],
		],
		Language: [
			[
				'ALPHA'.$.times(2, 3),
				'-${ExtLang}'.opt,
			],
			[
				'ALPHA'.$.times(4),
			],
			[
				'ALPHA'.$.times(5, 8),
			],
		],
		ExtLang: [
			[
				'ALPHA'.$.times(3),
				('-'+'ALPHA'.$.times(3)).times(0, 2),
			],
		],
		Script: [
			[
				'ALPHA'.$.times(4),
			],
		],
		Region: [
			[
				'ALPHA'.$.times(2),
			],
			[
				'DIGIT'.$.times(3),
			],
		],
		Variant: [
			[
				'ALPHA'.$,
				'ALPHANUM'.$.times(4, 8),
			],
			[
				'DIGIT'.$,
				'ALPHANUM'.$.times(3, 8),
			],
		],
		Extension: [
			[
				'SINGLETON'.$,
				'ExtensionRepeat'.$,
			],
		],
		ExtensionRepeat: [
			[
				('-'+'ALPHANUM'.$.times(2, 8)),
				'ExtensionRepeat'.opt,
			],
		],
		SINGLETON: [
			[
				range('a', 'w'),
				range('y', 'z'),
				range('A', 'W'),
				range('Y', 'Z'),
				'DIGIT'.$,
			],
		],
		PrivateUse: [
			[
				['x', 'X'].strs.or,
				'PrivateUseRepeat'.$,
			],
		],
		PrivateUseRepeat: [
			[
				('-'+'ALPHANUM'.$.times(1, 8)),
				'PrivateUseRepeat'.opt,
			],
		],
		Grandfathered: [
			[
				'ALPHA'.$.times(1, 4),
				('-'+'ALPHANUM'.$.times(2, 8)).times(1, 2),
			],
		],
	});
}
