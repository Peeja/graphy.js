@import '../../share/channel.jmacs'
@import '../../share/iris.jmacs'
@import '../../share/writer.jmacs'

import {
	fromC1,
	cachePrefixes,
	SI_PREFIX_BASE,
} from '@graphy/core';

import {
	Transform,
} from '../iso/stream.mjs';

// max string buffer size
const N_DEFAULT_MAX_BUFFER = 1 << 15;  // 32 KiB


export class ScribableContent extends Transform {
	// flush buffer
	static _flush_buffer(k_self) {
		// no buffer; exit
		if(!k_self._s_push) return;

		// push buffer to stream
		k_self.push(k_self._s_push);

		// reset buffer
		k_self._s_push = '';
	}

	constructor(gc_scribable={}) {
		super({
			writableObjectMode: true,
			readableObjectMode: false,
		});

		const {
			prefixes: h_prefixes={},
			baseIRI: p_base=null,
			_terse: b_terse,
		} = gc_scribable;

		// set base
		this._p_base = p_base;

		// internal buffer
		this._s_push = '';

		// max buffer length
		this._n_max_buffer = gc_scribable.max_buffer || gc_scribable.maxBuffer || N_DEFAULT_MAX_BUFFER;

		// prefixes
		this._h_prefixes = cachePrefixes(h_prefixes || {}, b_terse, p_base);

		// on new source(s)
		this.on('pipe', (ds_src) => {
			// listen for prefix events
			ds_src.on('prefix', (s_prefix_id, p_iri) => {
				this.write({
					type: 'prefixes',
					value: {
						[s_prefix_id]: p_iri,
					},
				})
			});

			// listen for comment events
			ds_src.on('comment', (s_comment) => {
				this.write({
					type: 'comment',
					value: s_comment,
				});
			});
		});

		// bind event listeners
		@*{
			const H_WRITE_EVENTS = {
				close: {once:true},
				drain: {},
				error: {},
				finish: {once:true},
				data: {},  // attach data listener last
				end: {once:true},
				warning: {},
			};

			for(const [s_event, g_event] of Object.entries(H_WRITE_EVENTS)) {
				yield /* syntax: js */ `
					if(gc_scribable.${s_event}) this.${g_event.once? 'once': 'on'}('${s_event}', gc_scribable.${s_event});
					`.trim()+'\n';
			}
		}
	}

	_serialize_base(p_base) {
		// update prefixes object
		Object.defineProperty(this._h_prefixes, SI_PREFIX_BASE, {
			enumerable: false,
			value: p_base,
		});

		// save base value
		this._p_base = p_base;
	}

	_serialize_hash_comment(s_comment) {
		return '# '+s_comment.replace(/\n/g, '\n# ')+'\n';
	}

	_serialize_newlines(n_newlines=1) {
		return '\n'.repeat(n_newlines);
	}

	_serialize_c4r(hc4r_quads) {
		const h_prefixes = this._h_prefixes;
		const a_unions = [];
		let s_write = '';

		// each graph in quads hash
		for(const sc1_graph in hc4r_quads) {
			// non-default graph; union from dataset
			if('*' !== sc1_graph) a_unions.push(sc1_graph);
			
			// add all quads from graph
			s_write += this._serialize_c3r(hc4r_quads[sc1_graph]);
		}

		// a union was performed
		if(a_unions.length) {
			// warn about implicit union
			const s_warning = `Destination format does not support quads; an implicit union into the default graph was performed on the quads contained in graphs: ${a_unions.map(sc1 => fromC1(sc1, h_prefixes).verbose()).join(', ')}`;

			// emit warning, wasn't listened to; force thru warn/stderr channel
			if(!this.emit('warning', s_warning)) {
				console.warn(s_warning);
			}
		}

		return s_write;
	}

	@*{
		const A_OVERRIDEABLE = [
			'c3',
			'c4',
		];

		for(const s_event_type of A_OVERRIDEABLE) {
			yield /* syntax: js */ `
				_serialize_${s_event_type}() {
					throw new Error(\`Write event type '${s_event_type}' not supported by \${this.constructor.name}\`);
				}
			`;
		}
	}

	@*{
		const A_REQUIRED = [
			'c3r',
			'quad',
		];

		for(const s_event_type of A_REQUIRED) {
			yield /* syntax: js */ `
				_serialize_${s_event_type}() {
					throw new Error(\`Write event type '${s_event_type}' should have been implemented by subclass \${this.constructor.name}\`);
				}
			`;
		}
	}

	// ignorable events
	_serialize_comment() {}  // eslint-disable-line class-methods-use-this

	// update prefix mappings
	_update_prefixes(h_prefixes_in, b_terse=false) {
		// merge prefixes
		const h_prefixes = {
			...this._h_prefixes,
			...h_prefixes_in,
		};

		// recache prefixes
		this._h_prefixes = cachePrefixes(h_prefixes || {}, b_terse);
	}

	// implement stream.Transform
	_transform(g_event, s_encoding, fke_transform) {
		let w_write;

		// try to serialize input value
		try {
			w_write = this.serialize(g_event);
		}
		// serialization error
		catch(e_serialize) {
			// report error
			fke_transform(e_serialize);

			// bail on transform
			return e_serialize;
		}

		// data to push
		if(w_write) {
			// flush internal buffer
			ScribableContent._flush_buffer(this);

			// push data to stream
			this.push(w_write);
		}
		// nothing returned from serialization
		else {
			const nl_push = this._s_push.length;

			// internal buffer high water mark
			if(nl_push > this._n_max_buffer) {
				ScribableContent._flush_buffer(this);
			}
			// allow buffer to build
			else if(nl_push) {
				// do not worry about clearing timeouts
				queueMicrotask(() => ScribableContent._flush_buffer(this));
			}
		}

		// callback
		fke_transform();
	}

	// queue data to be pushed later
	_queue(s_push) {
		this._s_push += s_push;

		// internal buffer high water mark
		if(this._s_push.length > this._n_max_buffer) {
			ScribableContent._flush_buffer(this);
		}
		else {
			// do not worry about clearing timeouts
			queueMicrotask(() => ScribableContent._flush_buffer(this));
		}
	}

	// route event object to serialization method
	serialize(g_event) {
		switch(g_event.type) {
			// rdfjs quad
			// eslint-disable-next-line no-undefined
			case undefined: return this._serialize_quad(g_event);

			// concise triple struct strict-mode
			case 'c3r': return this._serialize_c3r(g_event.value);

			// concise quad struct strict-mode
			case 'c4r': return this._serialize_c4r(g_event.value);

			// array of events
			case 'array': {
				// string building
				let s_write = '';

				// each subevent
				for(const g_sub of g_event.value) {
					// build serialization string
					const s_push = this.serialize(g_sub);

					// something to push
					if(s_push) {
						s_write += s_push;
					}
					// push was queued
					else if(this._s_push) {
						// concat to write
						s_write += this._s_push;

						// reset push
						this._s_push = '';
					}
				}

				// all done
				return s_write;
			}

			// quad
			case 'quad': return this._serialize_quad(g_event.value);

			// concise triple struct
			case 'c3': return this._serialize_c3(g_event.value);

			// concise quad struct
			case 'c4': return this._serialize_c4(g_event.value);

			// prefixes
			case 'prefixes': return this._serialize_prefixes(g_event.value);

			// comment
			case 'comment': return this._serialize_comment(g_event.value);

			// newline(s)
			case 'newline':
			case 'newlines': {
				return this._serialize_newlines(g_event.value);
			}

			// base
			case 'base': return this._serialize_base(g_event.value);

			// no such event type
			default: {
				throw new Error(`no such writable data event type for RDF stream: '${g_event.type}'`);
			}
		}
	}

	// rinse off buffer to writable
	rinse() {
		this._reset();
		ScribableContent._flush_buffer(this);
	}

	_flush() {
		// flush buffer
		ScribableContent._flush_buffer(this);

		// eof
		this.push(null);
	}
}

{
	const g_self = ScribableContent.prototype;
	g_self.isGraphyWritable = true;
	g_self._serialize_prefixes = g_self._update_prefixes;
}

export default ScribableContent;
