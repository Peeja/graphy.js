@import '../share/util.jmacs'

@// for counting if/else braces in regex matching
@$ c_braces = 0;

@.{
	const regex_to_src = s => s.replace(/([\\'])/g, '\\$1');
}

@>> R_CHAR_HEX()
	[0-9A-Fa-f]
@;

@>> R_UNICODE_4()
	@//@regex
	\\u(@{R_CHAR_HEX()}{4})
@;

@>> R_UNICODE_8()
	@//@regex
	\\U(@{R_CHAR_HEX()}{8})
@;

@>> R_ESCAPES()
	@//@regex
	(\\[\\])|\\([^tbnrfuU\\])
@;

@>> R_STRLIT_INVALID_START(s_quote)
	@//@regex
	^@{s_quote}(?:
		(?:
			@{s_quote}?(?!@{s_quote})                 @// single quote variant
			(?:
				[^@{s_quote}\\\r\n]*          @// valid characters
				(?:\\[^\r\n])*       @// optional escape sequence(s)
			)*
			(?:
				@{s_quote}([^\s@@^.,;\])#])   @// <-- bad termination
				| (\\[\r\n]|[\r\n])  @// <-- bad character
			)
		)
	)
@;


@> F_REPLACE_UNICODE_ANY()
	(s_, s_4, s_8) => String.fromCodePoint(parseInt(s_4 || s_8, 16))
@;

@>> RT_ESCAPES_INVALID()
	@//@regex
	(?:
		(?:^|[^\\])
		(?:
			\\(?:\\\\)*
			[^"tbnrfuU\\_~.!$&'()*+,;=/?#@%-]
		)
		(?:[^\\]|$)
	)
	| @{UCHAR('^')}
@;

@>> RT_LITERAL_CONTENTS_VALID(s_no_chars='')
	@//@regex
	^(?:
		[^\\@{s_no_chars}]
		| \\[tbnrf"'\\]
		| @{UCHAR()}
	)*$
@;


@> H_ESCAPES_JSON()
	@//@object-literal
	{
		'\t': '\\t',
		'\u0008': '\\b',
		'\n': '\\n',
		'\r': '\\r',
		'\f': '\\f',
		'"': '\\"',
	}
@;


@>> RANGE_PN_CHARS_BASE()
	@//@regex
	A-Za-z\xc0-\xd6\xd8-\xf6\xf8-\u{02ff}\u{0370}-\u{037d}\u{037f}-\u{1fff}\u{200c}-\u{200d}\u{2070}-\u{218f}\u{2c00}-\u{2fef}\u{3001}-\u{d7ff}\u{f900}-\u{fdcf}\u{fdf0}-\u{fffd}\u{10000}-\u{effff}
@;

@>> RANGE_PN_CHARS_U()
	@//@regex
	@{RANGE_PN_CHARS_BASE()}_
@;

@>> RANGE_PN_CHARS()
	@//@regex
	@{RANGE_PN_CHARS_U()}\-0-9\xb7\u{0300}-\u{036f}\u{203f}-\u{2040}
@;

@>> PN_CHARS_FS()
	@//@regex
	([@{RANGE_PN_CHARS()}.]*[@{RANGE_PN_CHARS()}])?
@;

@>> PN_PREFIX()
	@//@regex
	[@{RANGE_PN_CHARS_BASE()}]@{PN_CHARS_FS()}
@;

@>> PLX()
	@//@regex
	%[A-Fa-f0-9]{2}|\\[_~.\-!$&'()*+,;=/?#@%]
@;

@>> PN_LOCAL(b_nc=false)
	@//@regex
	(@{b_nc? '?:': ''}[@{RANGE_PN_CHARS_U()}:0-9]|@{PLX()})(@{b_nc? '?:': ''}(@{b_nc? '?:': ''}[@{RANGE_PN_CHARS()}.:]|@{PLX()})*(@{b_nc? '?:': ''}[@{RANGE_PN_CHARS()}:]|@{PLX()}))?
@;

@>> UCHAR(s_ins='')
	@//@regex
	\\u[@{s_ins}A-Fa-f0-9]{4}|\\U[@{s_ins}A-Fa-f0-9]{8}
@;

@>> RANGE_NAMED_NODE_INVALID(b_escapeless)
	@//@regex
	\0-\x20<>"{}|^`@{b_escapeless? '': /\\/.source}
@;

@>> RT_NAMED_NODE_VALID(b_escapeless=false)
	@//@regex
	^([^@{RANGE_NAMED_NODE_INVALID(b_escapeless)}]@{b_escapeless? '': '|'+UCHAR()})*$  @// need to test for `>` since it can be encoded as unicode escape sequence
@;



@// unescape a string literal
@> unescape_literal_whole(sv_literal, b_whitespace=false)
	JSON.parse('"'
		+@{sv_literal}
			.replace(R_UNICODE_8, F_REPLACE_UNICODE_ANY)
			.replace(R_ESCAPES, '$1$2') // no need to escape anything other than reserved characters
			.replace(/[\t"@{b_whitespace? '\\n\\r': ''}\f\u0008]/g, s_e => H_ESCAPES_JSON[s_e])
			@// @:
			@// 	.replace(/"/g, '\\"') // escape all quotes ;)
			@// @;
		+'"')
@;



@>> R_STRLIT_SHORT_CONTENTS_ESCAPES(r_flexibility)
@//@regex
(?:
	\\(?:
		([tnrfb])
		| ([\\"'])
		| u([0-9A-Fa-f]{4})
		| U([0-9A-Fa-f]{8})
	)
	| (
		[\r\n]
		| @{r_flexibility.source}
	)
)
@;


@>> R_STRLIT_LONG_CONTENTS_ESCAPES(r_flexibility)
@//@regex
(?:
	\\(?:
		([tnrfb])
		| ([\\"'])
		| u([0-9A-Fa-f]{4})
		| U([0-9A-Fa-f]{8})
	)
	| (
		@{r_flexibility.source}
	)
)
@;


@>> R_STRLIT_TERM_LOOKBEHIND(r_term, b_ws=false)
	@//@regex
	(?<!
		(?:
			[^\\] | ^
		)(?:
			\\\\
		)*
		\\
	)
	@{r_term.source}@{b_ws? /\s*/.source: ''}
@;


@//	(?:(?:[^\\]|^)(?:\\\\)*)@{r_term.source}@{b_ws? /\s*/.source: ''}

@>> R_STRLIT_TERM_POLYFILL(r_term, b_ws=false)
	@.{
		let s_src = r_term.source;
	}
	@//@regex
	(?:[^\\@{s_src[0]}]|\\.@{s_src.length > 1? '|'+s_src.slice(0, -1)+`?(?!${s_src[0]})`: ''})*(@{s_src}@{b_ws? /\s*/.source: ''})
@;

@> STRLIT_TERM(r_term)
	mk_lookbehind_regex(
		() => new RegExp('@{regex_to_src(R_STRLIT_TERM_LOOKBEHIND(r_term, true).toString())}', 'g'),
		/@{R_STRLIT_TERM_POLYFILL(r_term, true)}/y,
		RegExp_$lookbehind_polyfill
	),
@;

@> unescape_literals(b_terse=false)
	@// const R_STRLIT_ESCAPE_INCOMPLETE = /\\(|u[0-9A-Fa-f]{0,3}|U[0-9A-Fa-f]{0,7})$/;

	const F_REPLACE_STRLIT_CONTENTS = (s_, s_whitespace, s_auto, s_4, s_8, s_invalid) => {
		if(s_whitespace) {
			switch(s_whitespace) {
				case 't': return '\t';
				case 'n': return '\n';
				case 'r': return '\r';
				case 'f': return '\f';
				case 'b': return '\b';
				default: {
					console.assert(`bad regex escape char mapping: '${s_whitespace}'`);
				}
			}
		}
		else if(s_auto) {
			return s_auto;
		}
		else if(s_4) {
			return String.fromCodePoint(parseInt(s_4, 16));
		}
		else if(s_8) {
			return String.fromCodePoint(parseInt(s_8, 16));
		}
		else if(s_invalid) {
			// pointless escape
			if('\\' === s_invalid[0]) {
				// // relaxed
				// return s_invalid[1];

				// if relaxed then return s_invalid, otherwise throw:
				throw new ContextualError({
					offset: s_.indexOf(s_invalid),
					message: `Invalid escape sequence within string literal contents: ${JSON.stringify(s_invalid)}`,
				});
			}
			// bad character
			else {
				throw new ContextualError({
					offset: s_.indexOf(s_invalid),
					message: `Invalid whitespace character within string literal contents: ${JSON.stringify(s_invalid)}`,
				});
			}
		}
		else {
			console.assert(`unexpected no match branch in escape sequence replace callback`);
		}
	};

	@{unescape_literal_type('short')}
	@- b_terse
		@{unescape_literal_type('long')}
	@;

	// lookbehind regexes
	const [
		R_STRLIT_ESCAPE_INCOMPLETE,
		R_STRLIT_SHORT_DOUBLE_TERM,
		@- b_terse
			R_STRLIT_SHORT_SINGLE_TERM,
			R_STRLIT_LONG_DOUBLE_TERM,
			R_STRLIT_LONG_SINGLE_TERM,
		@;
	] = (() => {
		function RegExp_$lookbehind_polyfill(s_input) {
			let m_match = RegExp.prototype.exec.call(this, s_input);
			
			if(m_match) {
				let i_start = m_match[0].length - m_match[1].length;
				m_match.index += i_start;
				m_match[0] = m_match[0].slice(i_start);
			}
			
			return m_match;
		}

		let mk_lookbehind_regex = (() => {
			try {
				new RegExp('(?<!h)i');  // eslint-disable-line no-new
			}
			catch(e_compile) {
				return (f_lookbehind, r_polyfill, f_polyfill) => {
					r_polyfill.exec = f_polyfill;
					return r_polyfill;
				};
			}

			return f_lookbehind => f_lookbehind();
		})();

		return [
			// R_STRLIT_ESCAPE_INCOMPLETE
			mk_lookbehind_regex(
				() => new RegExp('@{regex_to_src(R_STRLIT_TERM_LOOKBEHIND(/\\(|u[0-9A-Fa-f]{0,3}|U[0-9A-Fa-f]{0,7})$/, false).toString())}'),
				/^(?:(?:[^\\]|\\.)*)(\\(?:|u[0-9A-Fa-f]{0,3}|U[0-9A-Fa-f]{0,7}))$/,
				function RegExp_$lookbehind_polyfill_n(s_input) {
					let m_match = RegExp.prototype.exec.call(this, s_input);

					if(m_match) {
						m_match.index += m_match[0].length - m_match[1].length;
					}
					
					return m_match;
				}
			),

			// R_STRLIT_SHORT_DOUBLE_TERM
			@{STRLIT_TERM(/"/)}

			@- b_terse
				// R_STRLIT_SHORT_SINGLE_TERM
				@{STRLIT_TERM(/'/)}

				// R_STRLIT_LONG_DOUBLE_TERM
				@{STRLIT_TERM(/"""/)}

				// R_STRLIT_LONG_SINGLE_TERM
				@{STRLIT_TERM(/'''/)}
			@;

	@//		mk_lookbehind_regex(
	@//			() => /@{R_STRLIT_TERM(/"/)}/g,
	@//			/(?:(?:[^\\]|^)(?:\\\\)*)"\s*/g,
	@//			RegExp_$lookbehind_polyfill_1
	@//		),
	@//
	@//		mk_lookbehind_regex(
	@//			() => /@{R_STRLIT_TERM(/'/)}/g,
	@//			/(?:(?:[^\\]|^)(?:\\\\)*)'\s*/g,
	@//			RegExp_$lookbehind_polyfill_1
	@//		),
	@//
	@//		mk_lookbehind_regex(
	@//			() => /@{R_STRLIT_TERM(/"""/)}/g,
	@//			/(?:(?:[^\\]|^)(?:\\\\)*)"""\s*/g,
	@//			RegExp_$lookbehind_polyfill_3
	@//		),
	@//
	@//		mk_lookbehind_regex(
	@//			() => /(?<!(?:[^\\]|^)(?:\\\\)*\\)'''\s*/,
	@//			/(?:(?:[^\\]|^)(?:\\\\)*)'''\s*/g,
	@//			RegExp_$lookbehind_polyfill_3
	@//		),
		];
	})();
@;

@> unescape_literal_type(s_type)
	@.{
		let s_type_caps = s_type.toUpperCase();
		let f_escapes = 'short' === s_type? R_STRLIT_SHORT_CONTENTS_ESCAPES: R_STRLIT_LONG_CONTENTS_ESCAPES;
	}

	const R_STRLIT_@{s_type_caps}_CONTENTS_ESCAPES_HARD = /@{f_escapes(/\\./)}/g;
	const R_STRLIT_@{s_type_caps}_CONTENTS_ESCAPES_SOFT = /@{f_escapes(/\\[^uU]|\\u[^]{4}|\\U[^]{8}/)}/g;

	const unescape_literal_@{s_type}_hard = s_literal => s_literal
		.replace(R_STRLIT_@{s_type_caps}_CONTENTS_ESCAPES_HARD, F_REPLACE_STRLIT_CONTENTS);

	const unescape_literal_@{s_type}_soft = (s_literal) => {
		let m_incomplete = R_STRLIT_ESCAPE_INCOMPLETE.exec(s_literal);

		// incomplete escape
		if(m_incomplete) {
			let i_safe = m_incomplete.index;

			// rewind
			return [
				s_literal.slice(0, i_safe)
					.replace(R_STRLIT_@{s_type_caps}_CONTENTS_ESCAPES_SOFT, F_REPLACE_STRLIT_CONTENTS),
				s_literal.slice(i_safe),
			];
		}
		// done
		else {
			return [
				s_literal
					.replace(R_STRLIT_@{s_type_caps}_CONTENTS_ESCAPES_SOFT, F_REPLACE_STRLIT_CONTENTS),
				'',
			];
		}
	};

@;

@.{
	function _if_str(a_strs, s_cmp='===', s_id='x') {
		return a_strs.map((s_str) => {
			let b_mono = 1 === s_str.length;
			return (b_mono? '': '(')+s_str.split('')
				.map((s, i) => `'${s.replace(/'/g, '\\\'')}' ${s_cmp} ${i? `s[i+${i}]`: s_id}`)
				.join(' && ')+(b_mono? '': ')');
		})
		.join(' || ');
	}
}

@// test the current character
@> if_char(...a_strs)
	if(@{_if_str(a_strs, '===', 'x')}) {
@;

@// else, test the current character without use of intermediate variable
@> if_char_only(...a_strs)
	if(@{_if_str(a_strs, '===', 's[i]')}) {
@;

@// else, test the current character
@> else_if_char(...a_strs)
	} else @{if_char(...a_strs)}
@;

@> else_if_not_char(...a_strs)
	} else if(@{_if_str(a_strs, '!==', 'x')}) {
@;

@// else, test the current character without use of intermediate variable
@> else_if_char_only(...a_strs)
	} else if(@{_if_str(a_strs, '===', 's[i]')}) {
@;


@// test regex
@> if_test(regex, local)
	@// count how many else branches we'll need to close
	@$ c_braces += 0;

	// prepare sticky regex index
	@{regex}.lastIndex = i;

	if(@{regex}.test(s)) {

	// advance index
	@{local? '': 'this.'}i = @{regex}.lastIndex;
@;

@// try next test
@> else_if_test(regex, local)
	@// count how many else branches we'll need to close
	@$ c_braces += 1;

	@// whern previous test fails
	} else {
		@// try next test
		@{if_test(regex, local)}
@;



@// exec regex and store match
@> if_match(s_regex, sv_match, b_local=false)
	@// count how many else branches we'll need to close
	@$ c_braces += 0;

	// prepare sticky regex index
	@{s_regex}.lastIndex = i;

	@// store the match
	@- sv_match
		// execute regex
		let @{sv_match} = @{s_regex}.exec(s);

		// regex was a match
		if(@{sv_match}) {
	@// no need to store the match
	@:
		if(@{s_regex}.exec(s)) {
	@;

	// advance index
	@{b_local? '': 'this.'}i = @{s_regex}.lastIndex;
@;

@// try next match
@> else_if_match(s_regex, sv_match, b_local)
	@// increment number of else branches we'll need to close
	@$ c_braces += 1;

	@// when previous match fails
	} else {
		@// try next match
		@{if_match(s_regex, sv_match, b_local)}
@;



@// try something else
@> if_call(s_method, sv_match, b_local)
	@.let s_no_shadow = s_method.replace(/[^a-z0-9]/gi, '_');

	// try match
	let aw_valid_@{s_no_shadow} = @{s_method}(s, i);

	// stack bail out
	if(!aw_valid_@{s_no_shadow}) return true;

	let [@{sv_match}, i@{sv_match}] = aw_valid_@{s_no_shadow};

	@// test
	if(@{sv_match}) {

		// advance index
		@{b_local? '': 'this.'}i = i@{sv_match};
@;

@// try something else
@> else_if_call(s_method, sv_match, b_local)
	@// increment number of else branches we'll need to close
	@$ c_braces += 1;

	@.let s_no_shadow = s_method.replace(/[^a-z0-9]/gi, '_');

	@// when previous match fails
	} else {
		// try match
		let aw_valid_@{s_no_shadow} = @{s_method}(s, i);

		// stack bail out
		if(!aw_valid_@{s_no_shadow}) return true;

		let [@{sv_match}, i@{sv_match}] = aw_valid_@{s_no_shadow};

		@// test
		if(@{sv_match}) {

			// advance index
			@{b_local? '': 'this.'}i = i@{sv_match};
@;


@// close all preceeding else branches
@> end_else()
 	@// close last branch
	}

	@// for all other branches
	@*{
		for(let i_brace=0; i_brace<c_braces; i_brace++) {
			yield `} // brace #${c_braces-i_brace}\n`;
		}
	}

	@// reset match counter
	@$ c_braces = 0;
@;


@// all matches failed, pause reader
@> else_any()
	// match counter: @{c_braces}
	} else {
@;


@// all matches failed, pause reader
@> else_retry(s_cleanup='')
	// match counter: @{c_braces}
	} else {
		@{s_cleanup}
		// break loop to retry on next chunk if eos
		break;

	@// close all preceeding else branches
	@{end_else()}
@;


@// wraps reader with simplified interface function to export
@> normalize_reader_config(g_config={})
	// at least one argument
	if(a_args.length) {
		let z_arg_0 = a_args[0];

		// input given unspecified
		if(z_arg_0 && z_arg_0.input && 'undefined' === typeof z_arg_0.input.string && !z_arg_0.input.stream) {
			z_arg_0 = z_arg_0.input;
		}

		// string
		if('string' === typeof z_arg_0) {
			@- g_config.string
				g_config.input = @{g_config.string('z_arg_0')};
			@:
				g_config.input = {string:z_arg_0};
			@;
		}
		// null
		else if(null === z_arg_0) {
			g_config.input = null;
		}
		// node stream
		else if('function' === typeof z_arg_0.setEncoding) {
			g_config.input = {stream:z_arg_0};
		}
		// whatwg stream
		else if('function' === typeof z_arg_0.pipeTo) {
			throw new TypeError(`Sorry, WHATWG streams are currently not supported :(`);
			// g_config.input = {stream:z_arg_0};
		}
		// config struct
		else if(z_arg_0 && 'object' === typeof z_arg_0 && '[object Object]' === Object.prototype.toString.call(z_arg_0)) {
			g_config = z_arg_0;

			// more args; invalid
			if(a_args.length > 1) {
				throw new TypeError(`unexpected argument(s) after config struct: ${a_args.slice(1)}`);
			}
		}
		// unknown
		else {
			throw new TypeError(`unexpected input type: ${z_arg_0}`);
		}

		// more args
		if(a_args.length > 1) {
			// copy onto struct
			Object.assign(g_config, a_args[1]);

			// more args
			if(a_args.length > 2) {
				throw new TypeError(`unexpected argument(s) after input and config struct: ${a_args.slice(2)}`);
			}
		}
	}
@;




@> create_parsing_export_class()
	@$ S_EXPORT = S_LABEL+S_MODE[0].toUpperCase()+S_MODE.substr(1)+'er';

	export class @{S_EXPORT} extends stream.@{B_LOAD? /* syntax: js */ `Writable`: /* syntax: js */ `Transform`} {
		static async run(z_input, gc_run) {
			// instantiate consumer
			const k_consumer = new Consumer(gc_run, @{S_EXPORT});

			// string
			if('string' === typeof z_input) {
				return k_consumer.consume_string(z_input);
			}
			// stream
			else {
				return await k_consumer.consume_stream(z_input);
			}
		}

		constructor(gc_consumer={}) {
			super({
				// do not decode strings into buffers
				decodeStrings: false,

				// accept strings as input on writable side
				writableObjectMode: false,

				@if !B_LOAD
					// output quad objects on readable side
					readableObjectMode: true,
				@;
			});

			// hash of rewired event handlers
			this._h_rewired = {};

			// instantiate consumer
			const k_consumer = this._k_consumer = new Consumer(gc_consumer, @{S_EXPORT});  // eslint-disable-line no-new

			// proxy stream
			k_consumer.proxy_transform(this);
		}

		_rewire_event(si_event) {
			// event not yet rewired
			if(this._h_rewired && !(si_event in this._h_rewired)) {
				let si_handler = `_fk_${si_event}`;

				// ref handler
				const fk_handler = this._k_consumer[si_handler]

				// legitimate event
				if(fk_handler){
					// reassign current handler
					if(F_NOOP !== fk_handler) {
						super.on(si_event, fk_handler);
					}

					// rewire handler
					this._k_consumer[si_handler] = (...a_args) => {
						this.emit(si_event, ...a_args);
					};

					// save to hash
					this._h_rewired[si_event] = 1;
				}
				// error event
				else if('error' === si_event) {
					const fe_handler = this._k_consumer._fe_error;

					// reassign current handler
					if(fe_handler && F_THROW !== fe_handler) {
						super.on('error', fe_handler);
					}

					// rewire handler
					this._k_consumer._fe_error = (...a_args) => {
						this.emit('error', ...a_args);
					};

					// save to hash
					this._h_rewired.error = 1;
				}
			}
		}

		// intercept on
		on(si_event, fk_event, gc_event) {
			// harden callback event
			this._rewire_event(si_event);

			// forward to proxy
			super.on(si_event, fk_event, gc_event);
		}

		// intercept once
		once(si_event, fk_event, gc_event) {
			// harden callback event
			this._rewire_event(si_event);

			// forward to proxy
			super.once(si_event, fk_event, gc_event);
		}

		@if !B_LOAD
			// intercept pipe
			pipe(ds_out) {
				let ds_dst = ds_out;

				// non-object mode
				if(!ds_dst._writableState.objectMode) {
					// transform to JSON
					ds_out = stream.quads_to_json();
				}
				// yet object mode and graphy writable
				else if(ds_out.isGraphyWritable) {
					// transform to writable data events
					ds_out = stream.quads_to_writable();
				}

				// interim stream created
				if(ds_out !== ds_dst) {
					// forward output to super
					super.pipe(ds_out);

					// pipe outpu to destination
					return ds_out.pipe(ds_dst);
				}
				// forward as-is to super
				else {
					return super.pipe(ds_dst);
				}
			}
		@;
	}

	export default @{S_EXPORT};
@;
