@./* global FORMAT */
@//

@import '../../text.read.jmacs'
@import '../../../share/channel.jmacs'
@import '../../../share/iris.jmacs'
@import '../../../share/writer.jmacs'

@$ B_NT = 'nt' === FORMAT;
@$ B_NQ = 'nq' === FORMAT;
@$ B_QUADS = B_NQ;

@$ S_CONTENT_TYPE = B_NT? 'application/n-triples': 'application/n-quads';

@$ S_LABEL = B_NT? 'NTriples': 'NQuads';

const factory = require('@{channel('core.data.factory')}');
const Writable = require('@{channel('core.class.writable')}');

const {
	c1_to_nt,
	clean_iri,
} = factory;

const N_MAX_STRING_BUFFER = 1 << 12;


function verbose_s(yt_subject) {
	if('NamedNode' === yt_subject.termType) {
		return '<'+clean_iri(yt_subject.value)+'>';
	}
	else {
		return '_:'+yt_subject.value;
	}
}


@- B_QUADS
	function verbose_g(yt_subject) {
		switch(yt_subject.termType) {
			// default graph
			case 'DefaultGraph': return '';

			// named node
			case 'NamedNode': return '<'+clean_iri(yt_subject.value)+'>';

			// blank node
			default: return '_:'+yt_subject.value;
		}
	}
@;


const verbose_p = yt_predicate => '<'+clean_iri(yt_predicate.value)+'>';

const P_IRI_XSD_STRING = 'http://www.w3.org/2001/XMLSchema#';
function verbose_o(yt_object) {
	switch(yt_object.termType) {
		// named node
		case 'NamedNode': return '<'+clean_iri(yt_object.value)+'>';

		// literal
		case 'Literal': {
			let s_contents = JSON.stringify(yt_object.value);

			if(yt_object.language) {
				return s_contents+'@'+yt_object.language;
			}
			else if(P_IRI_XSD_STRING === yt_object.datatype.value) {
				return s_contents;
			}
			else {
				return s_contents+'^^<'+clean_iri(yt_object.datatype.value)+'>';
			}
		}

		// blank node
		default: return '_:'+yt_object.value;
	}
}

class @{S_LABEL}_Writer extends Writable {
	constructor(gc_writer={}) {
		super(gc_writer);

		let {
			style: gc_style=null,
		} = gc_writer;

		Object.assign(this, {
			_xc_state: @{XC_STATE_DATA},
		});
	}

@> serialize_cn(n_n)
	@.{
		let b_c4 = false;
		let s_name = 'triples';
		if(4 === n_n) {
			s_name = 'quads';
			b_c4 = true;
		}
	}
	@//@object-literal
	// serialize c@{n_n} hash
	_serialize_c@{n_n}(hc@{n_n}_@{s_name}) {
		@//@
		let {
			_h_prefixes: h_prefixes,
		} = this;

		let s_write = '';

		@- b_c4
			// graph exit listener
			let f_exit_graph = null;

			// each graph
			for(let sc1_graph in hc4_quads) {
				// directive
				if('`' === sc1_graph[0]) {
					let g_apply = this._apply_directive(sc1_graph, hc4_quads[sc1_graph]);

					// write data
					if(g_apply.write) s_write += g_apply.write;

					// save exit listener
					if(g_apply.exit) f_exit_graph = g_apply.exit;
					continue;
				}

				// graph component
				let kt_graph = factory.c1(sc1_graph, h_prefixes);

				// post component
				let st_post = (kt_graph.isDefaultGraph? '': ' '+kt_graph.verbose())+' .\n';

				// ref triples
				let hc3_triples = hc4_quads[sc1_graph];
		@:
			// post component
			let st_post = ' .\n';
		@;

			// subject exit listener
			let f_exit_subject = null;

			// each subject
			for(let sc1_subject in hc3_triples) {
				// directive; serialize it
				if('`' === sc1_subject[0]) {
					let g_apply = this._apply_directive(sc1_subject, hc3_triples[sc1_subject]);

					// write data
					if(g_apply.write) s_write += g_apply.write;

					// save exit listener
					if(g_apply.exit) f_exit_subject = g_apply.exit;
					continue;
				}

				// subject-pre component
				let st_pre = c1_to_nt(sc1_subject, h_prefixes, true)+' ';

				// pair indent & terminator
				let s_indent_pairs = '';
				let s_term_pairs = '';

				// ref pairs
				let hc2_pairs = hc3_triples[sc1_subject];

				// predicate exit listener
				let f_exit_predicate = null;

				// each predicate
				for(let sc1_predicate in hc2_pairs) {
					// directive; serialize it
					if('`' === sc1_predicate[0]) {
						let g_apply = this._apply_directive(sc1_predicate, hc2_pairs[sc1_predicate]);

						// write data
						if(g_apply.write) s_write += g_apply.write;

						// save exit listener
						if(g_apply.exit) f_exit_predicate = g_apply.exit;
						continue;
					}

					// predicate component
					let st_predicate = c1_to_nt(sc1_predicate, h_prefixes, true);

					// ref objects
					let z_objects = hc2_pairs[sc1_predicate];

					// serialize objects
					s_write += this._encode_objects(st_pre+st_predicate+' ', z_objects, st_post);

					// // string buffer became too large
					// if(s_write.length >= N_MAX_STRING_BUFFER) {
					// 	debugger;
					// }
				}

				// call exit predicate listener
				if(f_exit_predicate) f_exit_predicate();
			}

			// call exit subject listener
			if(f_exit_subject) f_exit_subject();

		@- b_c4
			}

			// call exit graph listener
			if(f_exit_graph) f_exit_graph();
		@;

		return s_write;
	}
@;

	@{serialize_cn(3)}

	@- B_QUADS
		@{serialize_cn(4)}
	@;

	@//@object-literal

	// write objects
	_encode_objects(s_pre, z_objects, s_post, n_nest_level=1) {
		let {
			_h_prefixes: h_prefixes,
			_hm_coercions: hm_coercions,
		} = this;

		// deduce object value type
		switch(typeof z_objects) {
			// concise-term string
			case 'string': return s_pre+factory.c1(z_objects, h_prefixes).verbose()+s_post;

			// numeric type
			case 'number': return s_pre+factory.number(z_objects).verbose()+s_post;

			// boolean type
			case 'boolean': return s_pre+factory.boolean(z_objects).verbose()+s_post;

			// object
			case 'object': {
				// null; reject
				if(null === z_objects) throw new Error('Refusing to serialize null value given as an object of quad');

				// array, list of objects
				if(Array.isArray(z_objects) || z_objects instanceof Set) {
					let s_write = '';

					// each object
					for(let z_item of z_objects) {
						// item is an array; write list
						if(Array.isArray(z_item)) {
							// transcode list
							let hc2_list = this._transcode_list(z_item);

							// serialize transcoded list
							s_write += this._encode_objects(s_pre, hc2_list, s_post, n_nest_level);
						}
						// non-array; recurse on item
						else {
							s_write += this._encode_objects(s_pre, z_item, s_post, n_nest_level);
						}
					}

					return s_write;
				}
				// plain object, blank node
				else if(Object === z_objects.constructor) {
					// new blank node
					let st_blank = factory.blankNode();
					
					// start with incoming triple
					let s_write = s_pre+st_blank+s_post;

					// object exit listener
					let f_exit_object = null;

					// each pair
					for(let sc1_predicate in z_objects) {
						// directive; serialize it
						if('`' === sc1_predicate[0]) {
							let g_apply = this._apply_directive(sc1_predicate, z_objects[sc1_predicate]);

							// write data
							if(g_apply.write) s_write += g_apply.write;

							// save exit listener
							if(g_apply.exit) f_exit_object = g_apply.exit;
							continue;
						}

						// pre-string for nested triples
						let s_pre_nest = st_blank+' '+c1_to_nt(sc1_predicate, h_prefixes, true)+' ';

						// recurse
						s_write += this._encode_objects(s_pre_nest, z_objects[sc1_predicate], s_post, n_nest_level+1)
					}

					// call exit object listener
					if(f_exit_object) f_exit_object();

					return s_write;
				}
				// coercable instance
				else if(hm_coercions.has(z_objects.constructor)) {
					// convert javascript object to term object
					let kt_converted = hm_coercions.get(z_objects.constructor).apply(this, [z_objects, n_nest_level]);

					// serialize
					return s_pre+kt_converted.verbose(h_prefixes)+s_post;
				}
				// graphy term
				else if(z_objects.isGraphyTerm) {
					return s_pre+z_objects.verbose()+s_post;
				}
				// RDFJS term
				else if(z_objects.termType) {
					return s_pre+factory.fromTerm(z_objects).verbose()+s_post;
				}
			}

			// fallthrough: other
			default: {
				throw new Error(`Bad type for RDF object: [${typeof z_objects}] ${z_objects? z_objects.constructor: z_objects}`);
			}
		}
	}

	// rdfjs quad
	_serialize_quad(g_quad) {
		// serialize quad
		this._s_push += (@{XC_STATE_DATA} !== this._xc_state? '\n': '')
			+verbose_s(g_quad.subject)
			+' '+verbose_p(g_quad.predicate)
			+' '+verbose_o(g_quad.object)
			@{B_QUADS? /* syntax: js */ `+('DefaultGraph' === g_quad.graph.termType? '': ' '+verbose_g(g_quad.graph))`: ''}
			+' .\n';

		// update state
		this._xc_state = @{XC_STATE_DATA};
	}
}

Object.assign(@{S_LABEL}_Writer.prototype, {
	_serialize_c3r: @{S_LABEL}_Writer.prototype._serialize_c3,
	@- B_QUADS
		_serialize_c4r: @{S_LABEL}_Writer.prototype._serialize_c4,
	@;
	_serialize_comment: Writable.prototype._serialize_hash_comment,
});

module.exports = function(gc_writer) {
	return new @{S_LABEL}_Writer(gc_writer);
};
